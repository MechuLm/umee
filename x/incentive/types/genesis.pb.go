// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: umee/incentive/v1/genesis.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the x/incentive module's genesis state.
type GenesisState struct {
	Params             Params                                   `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	Programs           []IncentiveProgram                       `protobuf:"bytes,2,rep,name=programs,proto3" json:"programs"`
	ProgramRewards     []ProgramReward                          `protobuf:"bytes,3,rep,name=program_rewards,json=programRewards,proto3" json:"program_rewards"`
	NextId             uint32                                   `protobuf:"varint,4,opt,name=next_id,json=nextId,proto3" json:"next_id,omitempty"`
	TotalLocked        github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,5,rep,name=total_locked,json=totalLocked,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"total_locked"`
	LockAmounts        []LockAmount                             `protobuf:"bytes,6,rep,name=lock_amounts,json=lockAmounts,proto3" json:"lock_amounts"`
	PendingRewards     []PendingReward                          `protobuf:"bytes,7,rep,name=pending_rewards,json=pendingRewards,proto3" json:"pending_rewards"`
	RewardBases        []RewardBasis                            `protobuf:"bytes,8,rep,name=reward_bases,json=rewardBases,proto3" json:"reward_bases"`
	RewardAccumulators []RewardAccumulator                      `protobuf:"bytes,9,rep,name=reward_accumulators,json=rewardAccumulators,proto3" json:"reward_accumulators"`
	Unlockings         []Unlocking                              `protobuf:"bytes,10,rep,name=unlockings,proto3" json:"unlockings"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f117566517b8062, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetPrograms() []IncentiveProgram {
	if m != nil {
		return m.Programs
	}
	return nil
}

func (m *GenesisState) GetProgramRewards() []ProgramReward {
	if m != nil {
		return m.ProgramRewards
	}
	return nil
}

func (m *GenesisState) GetNextId() uint32 {
	if m != nil {
		return m.NextId
	}
	return 0
}

func (m *GenesisState) GetTotalLocked() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TotalLocked
	}
	return nil
}

func (m *GenesisState) GetLockAmounts() []LockAmount {
	if m != nil {
		return m.LockAmounts
	}
	return nil
}

func (m *GenesisState) GetPendingRewards() []PendingReward {
	if m != nil {
		return m.PendingRewards
	}
	return nil
}

func (m *GenesisState) GetRewardBases() []RewardBasis {
	if m != nil {
		return m.RewardBases
	}
	return nil
}

func (m *GenesisState) GetRewardAccumulators() []RewardAccumulator {
	if m != nil {
		return m.RewardAccumulators
	}
	return nil
}

func (m *GenesisState) GetUnlockings() []Unlocking {
	if m != nil {
		return m.Unlockings
	}
	return nil
}

// ProgramReward indicates the total amount of rewards that will be distributed by
// the incentive program with a given ID over its duration.
type ProgramReward struct {
	Id     uint32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Amount types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
}

func (m *ProgramReward) Reset()         { *m = ProgramReward{} }
func (m *ProgramReward) String() string { return proto.CompactTextString(m) }
func (*ProgramReward) ProtoMessage()    {}
func (*ProgramReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f117566517b8062, []int{1}
}
func (m *ProgramReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProgramReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProgramReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProgramReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProgramReward.Merge(m, src)
}
func (m *ProgramReward) XXX_Size() int {
	return m.Size()
}
func (m *ProgramReward) XXX_DiscardUnknown() {
	xxx_messageInfo_ProgramReward.DiscardUnknown(m)
}

var xxx_messageInfo_ProgramReward proto.InternalMessageInfo

func (m *ProgramReward) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ProgramReward) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

// LockAmount tracks the amount of coins of one token denomination locked into a
// given tier by a single address.
type LockAmount struct {
	Address string     `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Tier    uint32     `protobuf:"varint,2,opt,name=tier,proto3" json:"tier,omitempty"`
	Amount  types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
}

func (m *LockAmount) Reset()         { *m = LockAmount{} }
func (m *LockAmount) String() string { return proto.CompactTextString(m) }
func (*LockAmount) ProtoMessage()    {}
func (*LockAmount) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f117566517b8062, []int{2}
}
func (m *LockAmount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockAmount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockAmount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockAmount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockAmount.Merge(m, src)
}
func (m *LockAmount) XXX_Size() int {
	return m.Size()
}
func (m *LockAmount) XXX_DiscardUnknown() {
	xxx_messageInfo_LockAmount.DiscardUnknown(m)
}

var xxx_messageInfo_LockAmount proto.InternalMessageInfo

func (m *LockAmount) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *LockAmount) GetTier() uint32 {
	if m != nil {
		return m.Tier
	}
	return 0
}

func (m *LockAmount) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

// PendingReward tracks the amount of rewards that a given address has calculated
// but not yet claimed.
type PendingReward struct {
	Address       string                                   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PendingReward github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=pending_reward,json=pendingReward,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"pending_reward"`
}

func (m *PendingReward) Reset()         { *m = PendingReward{} }
func (m *PendingReward) String() string { return proto.CompactTextString(m) }
func (*PendingReward) ProtoMessage()    {}
func (*PendingReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f117566517b8062, []int{3}
}
func (m *PendingReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingReward.Merge(m, src)
}
func (m *PendingReward) XXX_Size() int {
	return m.Size()
}
func (m *PendingReward) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingReward.DiscardUnknown(m)
}

var xxx_messageInfo_PendingReward proto.InternalMessageInfo

func (m *PendingReward) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *PendingReward) GetPendingReward() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.PendingReward
	}
	return nil
}

// RewardBasis tracks the value of a given tier and lock denom's RewardAccumulator
// at the last time a specific address calculated pending rewards for it.
type RewardBasis struct {
	Address     string        `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Tier        uint32        `protobuf:"varint,2,opt,name=tier,proto3" json:"tier,omitempty"`
	LockDenom   string        `protobuf:"bytes,3,opt,name=lock_denom,json=lockDenom,proto3" json:"lock_denom,omitempty"`
	RewardBasis types.DecCoin `protobuf:"bytes,4,opt,name=reward_basis,json=rewardBasis,proto3" json:"reward_basis"`
}

func (m *RewardBasis) Reset()         { *m = RewardBasis{} }
func (m *RewardBasis) String() string { return proto.CompactTextString(m) }
func (*RewardBasis) ProtoMessage()    {}
func (*RewardBasis) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f117566517b8062, []int{4}
}
func (m *RewardBasis) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardBasis) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardBasis.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardBasis) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardBasis.Merge(m, src)
}
func (m *RewardBasis) XXX_Size() int {
	return m.Size()
}
func (m *RewardBasis) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardBasis.DiscardUnknown(m)
}

var xxx_messageInfo_RewardBasis proto.InternalMessageInfo

func (m *RewardBasis) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RewardBasis) GetTier() uint32 {
	if m != nil {
		return m.Tier
	}
	return 0
}

func (m *RewardBasis) GetLockDenom() string {
	if m != nil {
		return m.LockDenom
	}
	return ""
}

func (m *RewardBasis) GetRewardBasis() types.DecCoin {
	if m != nil {
		return m.RewardBasis
	}
	return types.DecCoin{}
}

// RewardAccumulator is a global reward tracking struct that indicates the amount
// of rewards that a single unit of lock_denom would have acucmulated if it was
// locked at a given tier since genesis.
type RewardAccumulator struct {
	Tier        uint32        `protobuf:"varint,1,opt,name=tier,proto3" json:"tier,omitempty"`
	LockDenom   string        `protobuf:"bytes,2,opt,name=lock_denom,json=lockDenom,proto3" json:"lock_denom,omitempty"`
	RewardBasis types.DecCoin `protobuf:"bytes,3,opt,name=reward_basis,json=rewardBasis,proto3" json:"reward_basis"`
}

func (m *RewardAccumulator) Reset()         { *m = RewardAccumulator{} }
func (m *RewardAccumulator) String() string { return proto.CompactTextString(m) }
func (*RewardAccumulator) ProtoMessage()    {}
func (*RewardAccumulator) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f117566517b8062, []int{5}
}
func (m *RewardAccumulator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardAccumulator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardAccumulator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardAccumulator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardAccumulator.Merge(m, src)
}
func (m *RewardAccumulator) XXX_Size() int {
	return m.Size()
}
func (m *RewardAccumulator) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardAccumulator.DiscardUnknown(m)
}

var xxx_messageInfo_RewardAccumulator proto.InternalMessageInfo

func (m *RewardAccumulator) GetTier() uint32 {
	if m != nil {
		return m.Tier
	}
	return 0
}

func (m *RewardAccumulator) GetLockDenom() string {
	if m != nil {
		return m.LockDenom
	}
	return ""
}

func (m *RewardAccumulator) GetRewardBasis() types.DecCoin {
	if m != nil {
		return m.RewardBasis
	}
	return types.DecCoin{}
}

// Unlocking is a structure that tracks an in-progress token unlock.
type Unlocking struct {
	Address string     `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Tier    uint32     `protobuf:"varint,2,opt,name=tier,proto3" json:"tier,omitempty"`
	End     uint64     `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
	Amount  types.Coin `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount"`
}

func (m *Unlocking) Reset()         { *m = Unlocking{} }
func (m *Unlocking) String() string { return proto.CompactTextString(m) }
func (*Unlocking) ProtoMessage()    {}
func (*Unlocking) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f117566517b8062, []int{6}
}
func (m *Unlocking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Unlocking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Unlocking.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Unlocking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Unlocking.Merge(m, src)
}
func (m *Unlocking) XXX_Size() int {
	return m.Size()
}
func (m *Unlocking) XXX_DiscardUnknown() {
	xxx_messageInfo_Unlocking.DiscardUnknown(m)
}

var xxx_messageInfo_Unlocking proto.InternalMessageInfo

func (m *Unlocking) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Unlocking) GetTier() uint32 {
	if m != nil {
		return m.Tier
	}
	return 0
}

func (m *Unlocking) GetEnd() uint64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *Unlocking) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "umeenetwork.umee.incentive.v1.GenesisState")
	proto.RegisterType((*ProgramReward)(nil), "umeenetwork.umee.incentive.v1.ProgramReward")
	proto.RegisterType((*LockAmount)(nil), "umeenetwork.umee.incentive.v1.LockAmount")
	proto.RegisterType((*PendingReward)(nil), "umeenetwork.umee.incentive.v1.PendingReward")
	proto.RegisterType((*RewardBasis)(nil), "umeenetwork.umee.incentive.v1.RewardBasis")
	proto.RegisterType((*RewardAccumulator)(nil), "umeenetwork.umee.incentive.v1.RewardAccumulator")
	proto.RegisterType((*Unlocking)(nil), "umeenetwork.umee.incentive.v1.Unlocking")
}

func init() { proto.RegisterFile("umee/incentive/v1/genesis.proto", fileDescriptor_3f117566517b8062) }

var fileDescriptor_3f117566517b8062 = []byte{
	// 700 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x4d, 0x6f, 0xd3, 0x4a,
	0x14, 0x8d, 0x93, 0xbc, 0xb4, 0xb9, 0x4e, 0xfa, 0xde, 0x1b, 0x90, 0x30, 0x15, 0x75, 0x4b, 0x24,
	0xa4, 0x80, 0xa8, 0xdd, 0x84, 0x05, 0xeb, 0x7e, 0x20, 0x54, 0x81, 0x50, 0x71, 0x85, 0x84, 0x60,
	0x11, 0x39, 0xf6, 0xc8, 0x8c, 0x1a, 0xcf, 0x44, 0x9e, 0x49, 0x5a, 0xf6, 0x6c, 0x91, 0xf8, 0x03,
	0x2c, 0xd8, 0xf2, 0x4b, 0x2a, 0xb1, 0xe9, 0x92, 0x15, 0xa0, 0xf6, 0x8f, 0xa0, 0xf9, 0x48, 0xe2,
	0xb4, 0xd0, 0x34, 0x88, 0x55, 0xef, 0xdc, 0xce, 0x39, 0xf7, 0xce, 0xb9, 0xe7, 0xc6, 0xb0, 0x3a,
	0x48, 0x31, 0xf6, 0x09, 0x8d, 0x30, 0x15, 0x64, 0x88, 0xfd, 0x61, 0xcb, 0x4f, 0x30, 0xc5, 0x9c,
	0x70, 0xaf, 0x9f, 0x31, 0xc1, 0xd0, 0x8a, 0xbc, 0x40, 0xb1, 0x38, 0x64, 0xd9, 0x81, 0x27, 0x63,
	0x6f, 0x7c, 0xd9, 0x1b, 0xb6, 0x96, 0xdd, 0x88, 0xf1, 0x94, 0x71, 0xbf, 0x1b, 0x72, 0x09, 0xee,
	0x62, 0x11, 0xb6, 0xfc, 0x88, 0x11, 0xaa, 0xe1, 0xcb, 0xb7, 0x2f, 0xf2, 0x4f, 0xf0, 0xfa, 0xca,
	0xf5, 0x84, 0x25, 0x4c, 0x85, 0xbe, 0x8c, 0x74, 0xb6, 0xf1, 0xa5, 0x02, 0xb5, 0xc7, 0xba, 0x93,
	0x7d, 0x11, 0x0a, 0x8c, 0xb6, 0xa1, 0xd2, 0x0f, 0xb3, 0x30, 0xe5, 0x8e, 0xb5, 0x66, 0x35, 0xed,
	0xf6, 0x1d, 0xef, 0xd2, 0xce, 0xbc, 0x3d, 0x75, 0x79, 0xab, 0x7c, 0xfc, 0x6d, 0xb5, 0x10, 0x18,
	0x28, 0x7a, 0x0e, 0x8b, 0xfd, 0x8c, 0x25, 0x8a, 0xa6, 0xb8, 0x56, 0x6a, 0xda, 0x6d, 0x7f, 0x06,
	0xcd, 0xee, 0xe8, 0xb0, 0xa7, 0x71, 0x86, 0x70, 0x4c, 0x83, 0x5e, 0xc3, 0xbf, 0x26, 0xee, 0x64,
	0xf8, 0x30, 0xcc, 0x62, 0xee, 0x94, 0x14, 0xf3, 0xfd, 0x59, 0x0d, 0x6a, 0x54, 0xa0, 0x40, 0x86,
	0x76, 0xa9, 0x9f, 0x4f, 0x72, 0x74, 0x03, 0x16, 0x28, 0x3e, 0x12, 0x1d, 0x12, 0x3b, 0xe5, 0x35,
	0xab, 0x59, 0x0f, 0x2a, 0xf2, 0xb8, 0x1b, 0x23, 0x0a, 0x35, 0xc1, 0x44, 0xd8, 0xeb, 0xf4, 0x58,
	0x74, 0x80, 0x63, 0xe7, 0x1f, 0x55, 0xf2, 0xa6, 0xa7, 0xc7, 0xe1, 0xc9, 0x71, 0x78, 0x66, 0x1c,
	0xde, 0x36, 0x23, 0x74, 0x6b, 0x43, 0xf2, 0x7f, 0xfe, 0xbe, 0xda, 0x4c, 0x88, 0x78, 0x33, 0xe8,
	0x7a, 0x11, 0x4b, 0x7d, 0x33, 0x3b, 0xfd, 0x67, 0x9d, 0xc7, 0x07, 0xbe, 0x78, 0xdb, 0xc7, 0x5c,
	0x01, 0x78, 0x60, 0xab, 0x02, 0x4f, 0x15, 0x3f, 0x0a, 0xa0, 0x26, 0x2b, 0x75, 0xc2, 0x94, 0x0d,
	0xa8, 0xe0, 0x4e, 0x45, 0xd5, 0xbb, 0x3b, 0xe3, 0x89, 0x12, 0xbc, 0xa9, 0x10, 0xe6, 0x7d, 0x76,
	0x6f, 0x9c, 0xd1, 0xca, 0x61, 0x1a, 0x13, 0x9a, 0x8c, 0x95, 0x5b, 0xb8, 0x9a, 0x72, 0x1a, 0x75,
	0x4e, 0xb9, 0x7c, 0x92, 0xa3, 0x7d, 0xa8, 0x69, 0xd2, 0x8e, 0xd4, 0x82, 0x3b, 0x8b, 0x8a, 0xf9,
	0xde, 0x0c, 0x66, 0x43, 0x19, 0x72, 0x32, 0x72, 0x8e, 0x9d, 0x8d, 0x52, 0x98, 0xa3, 0x04, 0xae,
	0x19, 0xd2, 0x30, 0x8a, 0x06, 0xe9, 0xa0, 0x17, 0x0a, 0x96, 0x71, 0xa7, 0xaa, 0xb8, 0x37, 0xae,
	0xc4, 0xbd, 0x39, 0x01, 0x9a, 0x0a, 0x28, 0x3b, 0xff, 0x0f, 0x8e, 0x9e, 0x01, 0x0c, 0xa8, 0xd4,
	0x8a, 0xd0, 0x84, 0x3b, 0xa0, 0xf8, 0x9b, 0x33, 0xf8, 0x5f, 0x8c, 0x00, 0x86, 0x37, 0xc7, 0xd0,
	0x78, 0x09, 0xf5, 0x29, 0xbb, 0xa1, 0x25, 0x28, 0x92, 0x58, 0x6d, 0x52, 0x3d, 0x28, 0x92, 0x18,
	0x3d, 0x84, 0x8a, 0x1e, 0xad, 0x53, 0x54, 0xdb, 0x75, 0x89, 0x93, 0xcc, 0x46, 0xe9, 0xeb, 0x0d,
	0x0e, 0x30, 0x99, 0x32, 0x72, 0x60, 0x21, 0x8c, 0xe3, 0x0c, 0x73, 0xbd, 0xa5, 0xd5, 0x60, 0x74,
	0x44, 0x08, 0xca, 0x82, 0xe0, 0x4c, 0xd1, 0xd7, 0x03, 0x15, 0xe7, 0x8a, 0x96, 0xe6, 0x2b, 0xfa,
	0xd1, 0x82, 0xfa, 0x94, 0x09, 0x2e, 0x29, 0x9c, 0xc1, 0xd2, 0xb4, 0xcb, 0xcc, 0xe2, 0xff, 0xd5,
	0x5d, 0xa9, 0x4f, 0xb9, 0xaf, 0xf1, 0xc9, 0x02, 0x3b, 0x67, 0xa5, 0x39, 0x65, 0x59, 0x01, 0x50,
	0xbb, 0x16, 0x63, 0xca, 0x52, 0x25, 0x4d, 0x35, 0xa8, 0xca, 0xcc, 0x8e, 0x4c, 0xa0, 0x47, 0x79,
	0x67, 0x13, 0xae, 0x7e, 0x18, 0xec, 0xf6, 0xad, 0x5f, 0x3e, 0x67, 0x07, 0x47, 0x39, 0xf9, 0x26,
	0x5e, 0x26, 0xbc, 0xf1, 0xde, 0x82, 0xff, 0x2f, 0x58, 0x72, 0xdc, 0x8f, 0xf5, 0xdb, 0x7e, 0x8a,
	0xb3, 0xfa, 0x29, 0xfd, 0x59, 0x3f, 0xef, 0x2c, 0xa8, 0x8e, 0x2d, 0x3c, 0xa7, 0x62, 0xff, 0x41,
	0x09, 0xd3, 0x58, 0x55, 0x2e, 0x07, 0x32, 0xcc, 0x59, 0xab, 0x3c, 0x97, 0xb5, 0xb6, 0x9e, 0x1c,
	0x9f, 0xba, 0xd6, 0xc9, 0xa9, 0x6b, 0xfd, 0x38, 0x75, 0xad, 0x0f, 0x67, 0x6e, 0xe1, 0xe4, 0xcc,
	0x2d, 0x7c, 0x3d, 0x73, 0x0b, 0xaf, 0x5a, 0x39, 0x37, 0xc8, 0xed, 0x5b, 0x37, 0xab, 0xa8, 0x0e,
	0xfe, 0xb0, 0xed, 0x1f, 0xe5, 0xbe, 0x73, 0xca, 0x1c, 0xdd, 0x8a, 0xfa, 0x96, 0x3d, 0xf8, 0x19,
	0x00, 0x00, 0xff, 0xff, 0xca, 0x67, 0x5c, 0x1f, 0x66, 0x07, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Unlockings) > 0 {
		for iNdEx := len(m.Unlockings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Unlockings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.RewardAccumulators) > 0 {
		for iNdEx := len(m.RewardAccumulators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardAccumulators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.RewardBases) > 0 {
		for iNdEx := len(m.RewardBases) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardBases[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.PendingRewards) > 0 {
		for iNdEx := len(m.PendingRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.LockAmounts) > 0 {
		for iNdEx := len(m.LockAmounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LockAmounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.TotalLocked) > 0 {
		for iNdEx := len(m.TotalLocked) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalLocked[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.NextId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.NextId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ProgramRewards) > 0 {
		for iNdEx := len(m.ProgramRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProgramRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Programs) > 0 {
		for iNdEx := len(m.Programs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Programs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ProgramReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProgramReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProgramReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Id != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LockAmount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockAmount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockAmount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Tier != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Tier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PendingReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PendingReward) > 0 {
		for iNdEx := len(m.PendingReward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingReward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardBasis) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardBasis) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardBasis) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RewardBasis.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.LockDenom) > 0 {
		i -= len(m.LockDenom)
		copy(dAtA[i:], m.LockDenom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.LockDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Tier != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Tier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardAccumulator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardAccumulator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardAccumulator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RewardBasis.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.LockDenom) > 0 {
		i -= len(m.LockDenom)
		copy(dAtA[i:], m.LockDenom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.LockDenom)))
		i--
		dAtA[i] = 0x12
	}
	if m.Tier != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Tier))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Unlocking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Unlocking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Unlocking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.End != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.End))
		i--
		dAtA[i] = 0x18
	}
	if m.Tier != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Tier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.Programs) > 0 {
		for _, e := range m.Programs {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ProgramRewards) > 0 {
		for _, e := range m.ProgramRewards {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.NextId != 0 {
		n += 1 + sovGenesis(uint64(m.NextId))
	}
	if len(m.TotalLocked) > 0 {
		for _, e := range m.TotalLocked {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.LockAmounts) > 0 {
		for _, e := range m.LockAmounts {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.PendingRewards) > 0 {
		for _, e := range m.PendingRewards {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.RewardBases) > 0 {
		for _, e := range m.RewardBases {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.RewardAccumulators) > 0 {
		for _, e := range m.RewardAccumulators {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Unlockings) > 0 {
		for _, e := range m.Unlockings {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *ProgramReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGenesis(uint64(m.Id))
	}
	l = m.Amount.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *LockAmount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Tier != 0 {
		n += 1 + sovGenesis(uint64(m.Tier))
	}
	l = m.Amount.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *PendingReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.PendingReward) > 0 {
		for _, e := range m.PendingReward {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *RewardBasis) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Tier != 0 {
		n += 1 + sovGenesis(uint64(m.Tier))
	}
	l = len(m.LockDenom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.RewardBasis.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *RewardAccumulator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tier != 0 {
		n += 1 + sovGenesis(uint64(m.Tier))
	}
	l = len(m.LockDenom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.RewardBasis.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *Unlocking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Tier != 0 {
		n += 1 + sovGenesis(uint64(m.Tier))
	}
	if m.End != 0 {
		n += 1 + sovGenesis(uint64(m.End))
	}
	l = m.Amount.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Programs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Programs = append(m.Programs, IncentiveProgram{})
			if err := m.Programs[len(m.Programs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgramRewards = append(m.ProgramRewards, ProgramReward{})
			if err := m.ProgramRewards[len(m.ProgramRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextId", wireType)
			}
			m.NextId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLocked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalLocked = append(m.TotalLocked, types.Coin{})
			if err := m.TotalLocked[len(m.TotalLocked)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockAmounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockAmounts = append(m.LockAmounts, LockAmount{})
			if err := m.LockAmounts[len(m.LockAmounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingRewards = append(m.PendingRewards, PendingReward{})
			if err := m.PendingRewards[len(m.PendingRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardBases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardBases = append(m.RewardBases, RewardBasis{})
			if err := m.RewardBases[len(m.RewardBases)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAccumulators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAccumulators = append(m.RewardAccumulators, RewardAccumulator{})
			if err := m.RewardAccumulators[len(m.RewardAccumulators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unlockings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unlockings = append(m.Unlockings, Unlocking{})
			if err := m.Unlockings[len(m.Unlockings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProgramReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProgramReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProgramReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockAmount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockAmount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockAmount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tier", wireType)
			}
			m.Tier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tier |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingReward = append(m.PendingReward, types.Coin{})
			if err := m.PendingReward[len(m.PendingReward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardBasis) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardBasis: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardBasis: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tier", wireType)
			}
			m.Tier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tier |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardBasis", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardBasis.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardAccumulator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardAccumulator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardAccumulator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tier", wireType)
			}
			m.Tier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tier |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardBasis", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardBasis.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Unlocking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Unlocking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Unlocking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tier", wireType)
			}
			m.Tier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tier |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
