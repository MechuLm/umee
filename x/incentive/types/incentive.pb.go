// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: umee/incentive/v1/incentive.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the incentive module.
type Params struct {
	// The id uniquely identifies the incentive program after it has been created.
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The max_unlocks defines the maximum amount of concurrent unlockings an address can have.
	MaxUnlocks uint32 `protobuf:"varint,2,opt,name=max_unlocks,json=maxUnlocks,proto3" json:"max_unlocks,omitempty" yaml:"max_unlocks"`
	// The lock_duration_long defines the unlocking duration of the long token lock tier.
	LockDurationLong uint64 `protobuf:"varint,3,opt,name=lock_duration_long,json=lockDurationLong,proto3" json:"lock_duration_long,omitempty" yaml:"long_tier_duration"`
	// The lock_duration_middle defines the unlocking duration of the middle token lock tier.
	LockDurationMiddle uint64 `protobuf:"varint,4,opt,name=lock_duration_middle,json=lockDurationMiddle,proto3" json:"lock_duration_middle,omitempty" yaml:"lock_duration_middle"`
	// The lock_duration_short defines the unlocking duration of the short token lock tier.
	LockDurationShort uint64 `protobuf:"varint,5,opt,name=lock_duration_short,json=lockDurationShort,proto3" json:"lock_duration_short,omitempty" yaml:"lock_duration_short"`
	// The tier_weight_short defines how the proportion of rewards assets locked
	// in the short locking duration receive compared to what the same amount
	// would receive on the long tier.
	TierWeightShort github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=tier_weight_short,json=tierWeightShort,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"tier_weight_short" yaml:"tier_weight_short"`
	// The tier_weight_middle defines how the proportion of rewards assets locked
	// in the short locking duration receive compared to what the same amount
	// would receive on the long tier.
	TierWeightMiddle github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=tier_weight_middle,json=tierWeightMiddle,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"tier_weight_middle" yaml:"tier_weight_middle"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c99c623956e199b, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Params) GetMaxUnlocks() uint32 {
	if m != nil {
		return m.MaxUnlocks
	}
	return 0
}

func (m *Params) GetLockDurationLong() uint64 {
	if m != nil {
		return m.LockDurationLong
	}
	return 0
}

func (m *Params) GetLockDurationMiddle() uint64 {
	if m != nil {
		return m.LockDurationMiddle
	}
	return 0
}

func (m *Params) GetLockDurationShort() uint64 {
	if m != nil {
		return m.LockDurationShort
	}
	return 0
}

// IncentiveProgram defines a liquidity mining incentive program on a single
// token that will run for a set amount of time.
type IncentiveProgram struct {
	// The supply_denom defines the denomination of the incentivized base token.
	SupplyDenom string `protobuf:"bytes,1,opt,name=supply_denom,json=supplyDenom,proto3" json:"supply_denom,omitempty" yaml:"supply_denom"`
	// The reward_denom defines the denomination of the reward base token.
	RewardDenom string `protobuf:"bytes,2,opt,name=reward_denom,json=rewardDenom,proto3" json:"reward_denom,omitempty" yaml:"reward_denom"`
	// The start_date is the unix time in seconds at which the incentives begin.
	StartDate uint64 `protobuf:"varint,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty" yaml:"start_date"`
	// The duration is the length of the incentive program in seconds.
	Duration uint64 `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *IncentiveProgram) Reset()         { *m = IncentiveProgram{} }
func (m *IncentiveProgram) String() string { return proto.CompactTextString(m) }
func (*IncentiveProgram) ProtoMessage()    {}
func (*IncentiveProgram) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c99c623956e199b, []int{1}
}
func (m *IncentiveProgram) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncentiveProgram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncentiveProgram.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncentiveProgram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncentiveProgram.Merge(m, src)
}
func (m *IncentiveProgram) XXX_Size() int {
	return m.Size()
}
func (m *IncentiveProgram) XXX_DiscardUnknown() {
	xxx_messageInfo_IncentiveProgram.DiscardUnknown(m)
}

var xxx_messageInfo_IncentiveProgram proto.InternalMessageInfo

func (m *IncentiveProgram) GetSupplyDenom() string {
	if m != nil {
		return m.SupplyDenom
	}
	return ""
}

func (m *IncentiveProgram) GetRewardDenom() string {
	if m != nil {
		return m.RewardDenom
	}
	return ""
}

func (m *IncentiveProgram) GetStartDate() uint64 {
	if m != nil {
		return m.StartDate
	}
	return 0
}

func (m *IncentiveProgram) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "umeenetwork.umee.incentive.v1.Params")
	proto.RegisterType((*IncentiveProgram)(nil), "umeenetwork.umee.incentive.v1.IncentiveProgram")
}

func init() { proto.RegisterFile("umee/incentive/v1/incentive.proto", fileDescriptor_8c99c623956e199b) }

var fileDescriptor_8c99c623956e199b = []byte{
	// 539 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4d, 0x8f, 0xd2, 0x4e,
	0x18, 0xa7, 0xfc, 0xf9, 0xa3, 0x0c, 0xbe, 0xc0, 0xec, 0xaa, 0x5d, 0xcc, 0x76, 0x70, 0x0e, 0x86,
	0xcb, 0xd2, 0xa0, 0x26, 0x26, 0x1c, 0x09, 0x17, 0x45, 0xcd, 0x5a, 0x63, 0x4c, 0xbc, 0x34, 0xb3,
	0x74, 0x52, 0x1a, 0x68, 0x87, 0x4c, 0x87, 0xb7, 0x6f, 0xe1, 0xd1, 0xe3, 0x7e, 0x0e, 0x3f, 0xc1,
	0x1e, 0xf7, 0x68, 0x3c, 0x34, 0x06, 0x2e, 0x9e, 0xfb, 0x09, 0xcc, 0xcc, 0x14, 0xe8, 0x8a, 0x17,
	0x4f, 0xcc, 0xef, 0x79, 0x7e, 0x2f, 0xe1, 0xe9, 0xf3, 0x80, 0x27, 0xb3, 0x90, 0x52, 0x3b, 0x88,
	0x86, 0x34, 0x12, 0xc1, 0x9c, 0xda, 0xf3, 0xce, 0x1e, 0xb4, 0xa7, 0x9c, 0x09, 0x06, 0x4f, 0x25,
	0x25, 0xa2, 0x62, 0xc1, 0xf8, 0xb8, 0x2d, 0xdf, 0xed, 0x3d, 0x63, 0xde, 0x69, 0x1c, 0xfb, 0xcc,
	0x67, 0x8a, 0x69, 0xcb, 0x97, 0x16, 0xe1, 0x6f, 0x25, 0x50, 0x3e, 0x27, 0x9c, 0x84, 0x31, 0xbc,
	0x07, 0x8a, 0x81, 0x67, 0x1a, 0x4d, 0xa3, 0x75, 0xd7, 0x29, 0x06, 0x1e, 0x7c, 0x09, 0xaa, 0x21,
	0x59, 0xba, 0xb3, 0x68, 0xc2, 0x86, 0xe3, 0xd8, 0x2c, 0xca, 0x46, 0xef, 0x61, 0x9a, 0x20, 0xb8,
	0x22, 0xe1, 0xa4, 0x8b, 0x73, 0x4d, 0xec, 0x80, 0x90, 0x2c, 0x3f, 0x6a, 0x00, 0x07, 0x00, 0xca,
	0x87, 0xeb, 0xcd, 0x38, 0x11, 0x01, 0x8b, 0xdc, 0x09, 0x8b, 0x7c, 0xf3, 0xbf, 0xa6, 0xd1, 0x2a,
	0xf5, 0x4e, 0xd3, 0x04, 0x9d, 0x68, 0xbd, 0xac, 0xba, 0x22, 0xa0, 0x7c, 0x47, 0xc4, 0x4e, 0x4d,
	0x0a, 0xfb, 0x19, 0x7c, 0xc3, 0x22, 0x1f, 0xbe, 0x07, 0xc7, 0x37, 0xcd, 0xc2, 0xc0, 0xf3, 0x26,
	0xd4, 0x2c, 0x29, 0x3b, 0x94, 0x26, 0xe8, 0xf1, 0xd6, 0xee, 0x90, 0x85, 0x1d, 0x98, 0x37, 0x7c,
	0xab, 0x8a, 0xf0, 0x1d, 0x38, 0xba, 0x49, 0x8e, 0x47, 0x8c, 0x0b, 0xf3, 0x7f, 0xe5, 0x68, 0xa5,
	0x09, 0x6a, 0xfc, 0xcd, 0x51, 0x91, 0xb0, 0x53, 0xcf, 0x1b, 0x7e, 0x90, 0x35, 0x38, 0x07, 0x75,
	0xf5, 0x37, 0x16, 0x34, 0xf0, 0x47, 0x22, 0x73, 0x2b, 0x37, 0x8d, 0x56, 0xa5, 0xf7, 0xfa, 0x2a,
	0x41, 0x85, 0x1f, 0x09, 0x7a, 0xea, 0x07, 0x62, 0x34, 0xbb, 0x68, 0x0f, 0x59, 0x68, 0x0f, 0x59,
	0x1c, 0xb2, 0x38, 0xfb, 0x39, 0x8b, 0xbd, 0xb1, 0x2d, 0x56, 0x53, 0x1a, 0xb7, 0xfb, 0x74, 0x98,
	0x26, 0xc8, 0xd4, 0xd9, 0x07, 0x86, 0xd8, 0xb9, 0x2f, 0x6b, 0x9f, 0x54, 0x49, 0xe7, 0xae, 0x00,
	0xcc, 0xd3, 0xb2, 0xc1, 0xdc, 0x52, 0xc1, 0x83, 0x7f, 0x0e, 0x3e, 0x39, 0x0c, 0xde, 0x0e, 0xb1,
	0xb6, 0x4f, 0xd6, 0x23, 0xec, 0x96, 0xbe, 0x5e, 0xa2, 0x02, 0x5e, 0x1b, 0xa0, 0xf6, 0x6a, 0xbb,
	0x63, 0xe7, 0x9c, 0xf9, 0x9c, 0x84, 0xb0, 0x0b, 0xee, 0xc4, 0xb3, 0xe9, 0x74, 0xb2, 0x72, 0x3d,
	0x1a, 0xb1, 0x50, 0x2d, 0x54, 0xa5, 0xf7, 0x28, 0x4d, 0xd0, 0x91, 0x4e, 0xc8, 0x77, 0xb1, 0x53,
	0xd5, 0xb0, 0x2f, 0x91, 0xd4, 0x72, 0xba, 0x20, 0xdc, 0xcb, 0xb4, 0xc5, 0x3f, 0xb5, 0xf9, 0x2e,
	0x76, 0xaa, 0x1a, 0x6a, 0xed, 0x0b, 0x00, 0x62, 0x41, 0xb8, 0x70, 0x3d, 0x22, 0x68, 0xb6, 0x6d,
	0x0f, 0xd2, 0x04, 0xd5, 0xb3, 0xd4, 0x5d, 0x0f, 0x3b, 0x15, 0x05, 0xfa, 0x44, 0x50, 0xd8, 0x00,
	0xb7, 0xb7, 0x5f, 0x58, 0xaf, 0x94, 0xb3, 0xc3, 0xdd, 0xd2, 0xaf, 0x4b, 0x64, 0xf4, 0x06, 0x57,
	0x6b, 0xcb, 0xb8, 0x5e, 0x5b, 0xc6, 0xcf, 0xb5, 0x65, 0x7c, 0xd9, 0x58, 0x85, 0xeb, 0x8d, 0x55,
	0xf8, 0xbe, 0xb1, 0x0a, 0x9f, 0x3b, 0xb9, 0xd9, 0xca, 0x7b, 0x3b, 0xcb, 0x8e, 0x4f, 0x01, 0x7b,
	0xfe, 0xcc, 0x5e, 0xe6, 0x0e, 0x56, 0x8d, 0xfa, 0xa2, 0xac, 0xae, 0xee, 0xf9, 0xef, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xf1, 0x1f, 0x3a, 0x67, 0xcf, 0x03, 0x00, 0x00,
}

func (this *IncentiveProgram) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IncentiveProgram)
	if !ok {
		that2, ok := that.(IncentiveProgram)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SupplyDenom != that1.SupplyDenom {
		return false
	}
	if this.RewardDenom != that1.RewardDenom {
		return false
	}
	if this.StartDate != that1.StartDate {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TierWeightMiddle.Size()
		i -= size
		if _, err := m.TierWeightMiddle.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIncentive(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.TierWeightShort.Size()
		i -= size
		if _, err := m.TierWeightShort.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIncentive(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.LockDurationShort != 0 {
		i = encodeVarintIncentive(dAtA, i, uint64(m.LockDurationShort))
		i--
		dAtA[i] = 0x28
	}
	if m.LockDurationMiddle != 0 {
		i = encodeVarintIncentive(dAtA, i, uint64(m.LockDurationMiddle))
		i--
		dAtA[i] = 0x20
	}
	if m.LockDurationLong != 0 {
		i = encodeVarintIncentive(dAtA, i, uint64(m.LockDurationLong))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxUnlocks != 0 {
		i = encodeVarintIncentive(dAtA, i, uint64(m.MaxUnlocks))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintIncentive(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IncentiveProgram) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncentiveProgram) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncentiveProgram) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		i = encodeVarintIncentive(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x20
	}
	if m.StartDate != 0 {
		i = encodeVarintIncentive(dAtA, i, uint64(m.StartDate))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RewardDenom) > 0 {
		i -= len(m.RewardDenom)
		copy(dAtA[i:], m.RewardDenom)
		i = encodeVarintIncentive(dAtA, i, uint64(len(m.RewardDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SupplyDenom) > 0 {
		i -= len(m.SupplyDenom)
		copy(dAtA[i:], m.SupplyDenom)
		i = encodeVarintIncentive(dAtA, i, uint64(len(m.SupplyDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintIncentive(dAtA []byte, offset int, v uint64) int {
	offset -= sovIncentive(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovIncentive(uint64(m.Id))
	}
	if m.MaxUnlocks != 0 {
		n += 1 + sovIncentive(uint64(m.MaxUnlocks))
	}
	if m.LockDurationLong != 0 {
		n += 1 + sovIncentive(uint64(m.LockDurationLong))
	}
	if m.LockDurationMiddle != 0 {
		n += 1 + sovIncentive(uint64(m.LockDurationMiddle))
	}
	if m.LockDurationShort != 0 {
		n += 1 + sovIncentive(uint64(m.LockDurationShort))
	}
	l = m.TierWeightShort.Size()
	n += 1 + l + sovIncentive(uint64(l))
	l = m.TierWeightMiddle.Size()
	n += 1 + l + sovIncentive(uint64(l))
	return n
}

func (m *IncentiveProgram) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SupplyDenom)
	if l > 0 {
		n += 1 + l + sovIncentive(uint64(l))
	}
	l = len(m.RewardDenom)
	if l > 0 {
		n += 1 + l + sovIncentive(uint64(l))
	}
	if m.StartDate != 0 {
		n += 1 + sovIncentive(uint64(m.StartDate))
	}
	if m.Duration != 0 {
		n += 1 + sovIncentive(uint64(m.Duration))
	}
	return n
}

func sovIncentive(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIncentive(x uint64) (n int) {
	return sovIncentive(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIncentive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUnlocks", wireType)
			}
			m.MaxUnlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxUnlocks |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockDurationLong", wireType)
			}
			m.LockDurationLong = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockDurationLong |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockDurationMiddle", wireType)
			}
			m.LockDurationMiddle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockDurationMiddle |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockDurationShort", wireType)
			}
			m.LockDurationShort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockDurationShort |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TierWeightShort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TierWeightShort.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TierWeightMiddle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TierWeightMiddle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIncentive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIncentive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncentiveProgram) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIncentive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncentiveProgram: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncentiveProgram: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplyDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupplyDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			m.StartDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartDate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIncentive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIncentive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIncentive(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIncentive
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIncentive
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIncentive
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIncentive
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIncentive        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIncentive          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIncentive = fmt.Errorf("proto: unexpected end of group")
)
